// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TuneGuessr.Infrastructure;

#nullable disable

namespace TuneGuessr.Infrastructure.Migrations
{
    [DbContext(typeof(TuneGuessrDbContext))]
    partial class TuneGuessrDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TuneGuessr.Domain.Entities.GameSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("GameSessions");
                });

            modelBuilder.Entity("TuneGuessr.Domain.Entities.Lobby", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<int>("PlayerCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Lobbies");
                });

            modelBuilder.Entity("TuneGuessr.Domain.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("GameSessionId")
                        .HasColumnType("int");

                    b.Property<int?>("LobbyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpotifyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameSessionId");

                    b.HasIndex("LobbyId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("TuneGuessr.Domain.Entities.PlayerState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("GameSessionId")
                        .HasColumnType("int");

                    b.Property<int?>("LobbyId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameSessionId");

                    b.HasIndex("LobbyId");

                    b.ToTable("PlayerStates");
                });

            modelBuilder.Entity("TuneGuessr.Domain.Entities.Playlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("SpotifyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("TuneGuessr.Domain.Entities.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrentPreviewLength")
                        .HasColumnType("int");

                    b.Property<int>("CurrentTrackId")
                        .HasColumnType("int");

                    b.Property<int?>("GameSessionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("GameSessionId");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("TuneGuessr.Domain.Entities.Song", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Album")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Artist")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GameSessionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlaylistId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameSessionId");

                    b.HasIndex("PlaylistId");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("TuneGuessr.Domain.Entities.Player", b =>
                {
                    b.HasOne("TuneGuessr.Domain.Entities.GameSession", null)
                        .WithMany("Players")
                        .HasForeignKey("GameSessionId");

                    b.HasOne("TuneGuessr.Domain.Entities.Lobby", null)
                        .WithMany("Players")
                        .HasForeignKey("LobbyId");
                });

            modelBuilder.Entity("TuneGuessr.Domain.Entities.PlayerState", b =>
                {
                    b.HasOne("TuneGuessr.Domain.Entities.GameSession", null)
                        .WithMany("PlayerStates")
                        .HasForeignKey("GameSessionId");

                    b.HasOne("TuneGuessr.Domain.Entities.Lobby", null)
                        .WithMany("PlayerStates")
                        .HasForeignKey("LobbyId");
                });

            modelBuilder.Entity("TuneGuessr.Domain.Entities.Playlist", b =>
                {
                    b.HasOne("TuneGuessr.Domain.Entities.Player", null)
                        .WithMany("PlayLists")
                        .HasForeignKey("PlayerId");
                });

            modelBuilder.Entity("TuneGuessr.Domain.Entities.Round", b =>
                {
                    b.HasOne("TuneGuessr.Domain.Entities.GameSession", null)
                        .WithMany("Rounds")
                        .HasForeignKey("GameSessionId");
                });

            modelBuilder.Entity("TuneGuessr.Domain.Entities.Song", b =>
                {
                    b.HasOne("TuneGuessr.Domain.Entities.GameSession", null)
                        .WithMany("Songs")
                        .HasForeignKey("GameSessionId");

                    b.HasOne("TuneGuessr.Domain.Entities.Playlist", null)
                        .WithMany("Songs")
                        .HasForeignKey("PlaylistId");
                });

            modelBuilder.Entity("TuneGuessr.Domain.Entities.GameSession", b =>
                {
                    b.Navigation("PlayerStates");

                    b.Navigation("Players");

                    b.Navigation("Rounds");

                    b.Navigation("Songs");
                });

            modelBuilder.Entity("TuneGuessr.Domain.Entities.Lobby", b =>
                {
                    b.Navigation("PlayerStates");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("TuneGuessr.Domain.Entities.Player", b =>
                {
                    b.Navigation("PlayLists");
                });

            modelBuilder.Entity("TuneGuessr.Domain.Entities.Playlist", b =>
                {
                    b.Navigation("Songs");
                });
#pragma warning restore 612, 618
        }
    }
}
